
#Добавление устройств zigbee
    - alias: zigbee_device_joined_notification
      id: zigbee_device_joined_notification
      mode: queued
      triggers:
        - trigger: mqtt
          topic: 'zigbee2mqtt/bridge/event'
      conditions:
        condition: template
        value_template: '{{trigger.payload_json.type == "device_interview" and trigger.payload_json.data.status == "successful" and trigger.payload_json.data.supported}}'
      actions:
        - action: telegram_bot.send_message
          data:
            title: >-
                     {{ '\U0001f41d' }} <b>Добавление устройств Zigbee</b>
            message: >-
                      Добавлено новое устройство:
                      {{- '\n' -}}
                      Имя: {{trigger.payload_json.data.friendly_name | e}},
                      {{- '\n' -}}
                      Поставщик: {{trigger.payload_json.data.definition.vendor | e}},
                      {{- '\n' -}}
                      Модель: {{trigger.payload_json.data.definition.model | e}}
                      {{- '\n' -}}
                      Описание: {{trigger.payload_json.data.definition.description | e}}
            disable_notification: true
            parse_mode: 'html'
            target: !secret telegram_enzokot_chat_id
            
#Проверка засыпания и отключения устройств zigbee
    - alias: zigbee2mqtt_devices_last_seen
      id: zigbee2mqtt_devices_last_seen
      triggers:
        - trigger: time_pattern
          hours: "/1"
      conditions:
        - condition: template
          value_template: >
            {%- set time_limit = as_timestamp(now(), 0) - 3*60*60 -%}
            {%- set list_sensors = expand('group.dynamic_group_sensor_last_seen') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') | selectattr('state', 'ne', 'unknown') -%}
            {%- set datanames = namespace(last_seen=[]) -%}
            {%- for state in list_sensors -%}
            {%- if state.entity_id.endswith('_last_seen') -%}
            {%- set time_ms = 1000 -%} 
            {%- set state_ms = state.state -%}
            {%- else -%}
            {%- set time_ms = 1 -%} 
            {%- set state_ms = as_timestamp(state.state , 0) -%}
            {%- endif -%}
            {%- if (state_ms | int(time_limit * time_ms, 0)) < (time_limit * time_ms) or not has_value(state.entity_id) -%}
            {%- set datanames.last_seen = datanames.last_seen + [state] -%}
            {%- endif -%}
            {%- endfor -%}
            {{ datanames.last_seen | length > 0 }}
      actions:  
        - action: telegram_bot.send_message
          data:
            title: >-
                    {%- set time_limit = as_timestamp(now(), 0) - 3*60*60 -%}
                    {%- set list_sensors = expand('group.dynamic_group_sensor_last_seen') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') | selectattr('state', 'ne', 'unknown') -%}
                    {%- set datanames = namespace(last_seen=[]) -%}
                    {%- for state in list_sensors -%}
                    {%- if state.entity_id.endswith('_last_seen') -%}
                    {%- set time_ms = 1000 -%} 
                    {%- set state_ms = state.state -%}
                    {%- else -%}
                    {%- set time_ms = 1 -%} 
                    {%- set state_ms = as_timestamp(state.state, 0) -%}
                    {%- endif -%}
                    {%- if (state_ms | int(time_limit * time_ms)) < (time_limit * time_ms) or not has_value(state.entity_id) -%}
                    {%- set datanames.last_seen = datanames.last_seen + [state] -%}
                    {%- endif -%}
                    {%- endfor -%}
                    
                    {%- set missing_count = datanames.last_seen | length -%}
                    {%- if missing_count > 0 %} ⚠️ {%- else %} {{ '\U00002705' }} {%- endif %} *Контроль устройств Zigbee*
            disable_notification: true
            target: !secret telegram_enzokot_chat_id
            message: >
                    {%- set time_limit = as_timestamp(now(), 0) - 3*60*60 -%}
                    {%- set list_sensors = expand('group.dynamic_group_sensor_last_seen') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') | selectattr('state', 'ne', 'unknown') -%}
                    {%- set datanames = namespace(device_name=[]) -%}
                    {%- for state in list_sensors -%}
                    {%- if state.entity_id.endswith('_last_seen') -%}
                    {%- set time_ms = 1000 -%} 
                    {%- set state_ms = state.state -%}
                    {%- else -%}
                    {%- set time_ms = 1 -%} 
                    {%- set state_ms = as_timestamp(state.state, 0) -%}
                    {%- endif -%}
                    {%- if (state_ms | int(time_limit * time_ms)) < (time_limit * time_ms) or not has_value(state.entity_id) -%}
                    {% if device_attr(state.entity_id, 'name_by_user') != none %}
                      {%- set datanames.device_name = datanames.device_name + [device_attr(state.entity_id, 'name_by_user')] -%}
                    {% else %}
                      {%- set datanames.device_name = datanames.device_name + [device_attr(state.entity_id, 'name')] -%}
                    {% endif %}
                    {%- endif -%}
                    {%- endfor -%}

                    {%- set missing = datanames.device_name | list -%}
                    {% set missing_count = missing | count %}
                    {% set z2m_uptime = ((as_timestamp(now(), 0) - (states('sensor.zigbee2mqtt_bridge_uptime') | int(0))) / 3600) | round(1, 'common', 0) %}
                    
                    {% if missing_count > 0 %}Более 3 часов {{- iif(is_state('sensor.zigbee2mqtt_bridge_uptime', 'unavailable'), ' ', ' (время работы z2m: ' + z2m_uptime | string + 'ч) ') -}} не было данных от: {{ missing | join(', ') }}
                    {% else %}Все устройства доступны.{% endif %}

#Проверка качества связи устройств zigbee
    - alias: zigbee2mqtt_devices_link_check
      id: zigbee2mqtt_devices_link_check
      triggers:
        - trigger: time_pattern
          hours: "/1"
      conditions:
        - condition: template
          value_template: >
                {%- set list_sensors = expand('group.dynamic_group_sensor_linkquality') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') -%}
                {%- set datanames = namespace(low_linkquality=[]) -%}
                {%- for state in list_sensors -%}
                {%- if (state.entity_id.endswith('_linkquality') and (state.state | int(15)) < 15) or 
                    (state.entity_id.endswith('_zigbee') and (state_attr(state.entity_id ,'linkquality') | int(15)) < 15)-%}
                {%- set datanames.low_linkquality = datanames.low_linkquality + [state] -%}
                {%- endif -%}
                {%- endfor -%}
                {{ datanames.low_linkquality | length > 0 }}
      actions:
        - action: script.zigbee2mqtt_linkuality_check

#Атоматическая калибровка локальной температуры термоголовок
    - alias: auto_local_temperature_calibration_thermostats
      id: auto_local_temperature_calibration_thermostats
      triggers:
        - trigger: time_pattern
          minutes: "/3"
      actions:
        - parallel:
            - action: script.auto_local_temperature_calibration_thermostats
              data:
                namevalve: 'Bedroom valve with thermostat'
                objectvalve: 'climate.0x60a423fffe968719'
                objectvalvewindow: 'switch.0x60a423fffe968719_window_detection'
                objectsensortemperature: 'sensor.esp_xiaomi_bed_room_temperature'
            - action: script.auto_local_temperature_calibration_thermostats
              data:
                namevalve: 'Living room valve with thermostat'
                objectvalve: 'climate.0x5c0272fffec9db22'
                objectvalvewindow: 'switch.0x5c0272fffec9db22_window_detection'
                objectsensortemperature: 'sensor.esp_xiaomi_living_room_temperature'
            - action: script.auto_local_temperature_calibration_thermostats
              data:
                namevalve: 'Childrens room valve with thermostat'
                objectvalve: 'climate.0x5c0272fffec89454'
                objectvalvewindow: 'switch.0x5c0272fffec89454_window_detection'
                objectsensortemperature: 'sensor.esp_xiaomi_childrens_room_temperature'
            - action: script.auto_local_temperature_calibration_thermostats
              data:
                namevalve: 'Kitchen valve with thermostat'
                objectvalve: 'climate.0x5c0272fffe8de819'
                objectvalvewindow: 'switch.0x5c0272fffe8de819_window_detection'
                objectsensortemperature: 'sensor.esp_xiaomi_kitchen_temperature'

#Автоматическая установка boost режима во время сна
    - alias: auto_boost_mode_thermostats_at_sleeping_time
      id: auto_boost_mode_thermostats_at_sleeping_time
      triggers:
        - trigger: time
          at:
            - "02:30:00"
            - "05:30:00"
            #- "23:30:00"
      actions:
        - parallel:
            - choose:
                - conditions:
                    - condition: state
                      entity_id: input_boolean.thermostat_bedroom_night_mode
                      state: 'on'
                    # - condition: numeric_state
                    #   entity_id: sensor.thermostat_bedroom_valve_position
                    #   above: 79
                    # - condition: numeric_state
                    #   entity_id: sensor.esp_xiaomi_bed_room_temperature
                    #   below: 25.7
                  sequence:      
                    - action: climate.set_preset_mode
                      target:
                        entity_id: climate.0x60a423fffe968719
                      data:
                        preset_mode: 'boost'
            - choose:
                - conditions:
                    - condition: state
                      entity_id: input_boolean.thermostat_childrensroom_night_mode
                      state: 'on'
                    # - condition: numeric_state
                    #   entity_id: sensor.thermostat_childrens_room_valve_position
                    #   above: 79
                    # - condition: numeric_state
                    #   entity_id: sensor.esp_xiaomi_childrens_room_temperature
                    #   below: 25.7
                  sequence:      
                    - action: climate.set_preset_mode
                      target:
                        entity_id: climate.0x5c0272fffec89454
                      data:
                        preset_mode: 'boost'

    - alias: switching_thermostat_night_mode
      id: switching_thermostat_night_mode
      initial_state: 'true'
      triggers:
        - trigger: state
          entity_id: 
             - input_boolean.thermostat_bedroom_night_mode
             - input_boolean.thermostat_childrensroom_night_mode
             - automation.auto_boost_mode_thermostats_at_sleeping_time
      conditions:
        - condition: template
          value_template: >
             {{ 
                (is_state('input_boolean.thermostat_bedroom_night_mode', 'off') and is_state('input_boolean.thermostat_childrensroom_night_mode', 'off') 
                and is_state('automation.auto_boost_mode_thermostats_at_sleeping_time', 'on'))
                or
                ((is_state('input_boolean.thermostat_bedroom_night_mode', 'on') or is_state('input_boolean.thermostat_childrensroom_night_mode', 'on')) 
                and is_state('automation.auto_boost_mode_thermostats_at_sleeping_time', 'off'))
             }}
      actions:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.platform == 'state' and trigger.to_state.domain == 'input_boolean' }}"
                sequence:
                    - action: >
                            {% if is_state('input_boolean.thermostat_bedroom_night_mode', 'off') and is_state('input_boolean.thermostat_childrensroom_night_mode', 'off') %}
                              automation.turn_off
                            {% else %}
                              automation.turn_on
                            {% endif %}
                      target:
                        entity_id: automation.auto_boost_mode_thermostats_at_sleeping_time
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.platform == 'state' and trigger.to_state.domain == 'automation' }}"
                sequence:
                    - action: >
                            {% if is_state('automation.auto_boost_mode_thermostats_at_sleeping_time', 'off') %}
                              input_boolean.turn_off
                            {% else %}
                              input_boolean.turn_on
                            {% endif %}
                      target:
                        entity_id: 
                          - input_boolean.thermostat_bedroom_night_mode
                          - input_boolean.thermostat_childrensroom_night_mode

#Автоматическое проворачивание TRV два раза в месяц
    - alias: auto_scrolling_thermostats_at_month
      id: auto_scrolling_thermostats_at_month
      triggers:
        - trigger: time
          at: "10:00:00"
      conditions:
        - "{{ now().timestamp() | timestamp_custom('%d') | int(0) in [1, 15] }}"
        - condition: state
          entity_id:
            - climate.0x5c0272fffec89454
            - climate.0x60a423fffe968719
            - climate.0x5c0272fffec9db22
            - climate.0x5c0272fffe8de819
          state: "heat"
      actions:
        - action: climate.set_hvac_mode
          target:
            entity_id: 
              - climate.0x5c0272fffec89454
              - climate.0x60a423fffe968719
              - climate.0x5c0272fffec9db22
              - climate.0x5c0272fffe8de819
          data:
            hvac_mode: "off"
        - delay: "00:02:00"
        - action: climate.set_hvac_mode
          target:
            entity_id: 
              - climate.0x5c0272fffec89454
              - climate.0x60a423fffe968719
              - climate.0x5c0272fffec9db22
              - climate.0x5c0272fffe8de819
          data:
            hvac_mode: "heat"
        - delay: "00:01:00"
        - action: telegram_bot.send_message
          data:
            target: !secret telegram_enzokot_chat_id
            disable_notification: true
            title: "{{ '\U0001F527' }} *Обслуживание устройств*"
            message: "Выполнено обслуживание TRV, необходимо проверить состояние и физическое положение штоков."

#Установка списка роутеров
    - alias: set_options_for_selected_router_for_permit_join_z2m
      id: set_options_for_selected_router_for_permit_join_z2m
      mode: queued
      triggers:
        - trigger: state
          entity_id: sensor.router_devices_z2m
          not_from:
        - trigger: homeassistant
          event: start
        - trigger: event
          event_type: automation_reloaded
        - trigger: event
          id: 'input_select_reload'
          event_type: call_service
          event_data:
            domain: input_select
            service: reload
      actions:
        - if:
            - condition: trigger
              id: input_select_reload
          then:
            - wait_for_trigger:
                - trigger: state
                  entity_id: input_select.selected_router_for_permit_join_z2m
                  to:
              timeout:
                seconds: 2
        - variables:
            new_options: > 
                {% set select_options = iif(states('sensor.router_devices_z2m') | int(0) > 0, state_attr('sensor.router_devices_z2m', 'routers'), ['Не выбрано']) %}
                {% set data = namespace(entities=[]) %}
                {% for i in select_options -%}
                    {% if loop.first %}
                      {% set data.entities = data.entities + ['Не выбрано'] %}
                    {% endif %}
                    {% set data.entities = data.entities + [i] %}
                {% endfor %}
                {{ data.entities | unique | list }}
            old_options_with_new: >
                {% set data = namespace(entities=[]) %}
                {% for i in new_options -%}
                    {% set data.entities = data.entities + [i] %}
                    {% if loop.last %}
                      {% set data.entities = data.entities + [states('input_select.selected_router_for_permit_join_z2m')] %}
                    {% endif %}
                {% endfor %}
                {{ data.entities | unique | list }}
        - action: input_select.set_options
          target:
            entity_id: input_select.selected_router_for_permit_join_z2m
          data:
            options: "{{ old_options_with_new }}"
        - action: input_select.select_option
          target:
            entity_id: input_select.selected_router_for_permit_join_z2m
          data:
            option: "{{ new_options | first }}"
        - action: input_select.set_options
          target:
            entity_id: input_select.selected_router_for_permit_join_z2m
          data:
            options: "{{ new_options }}"
        - action: input_select.select_first
          target:
            entity_id: input_select.selected_router_for_permit_join_z2m

#Запуск добавления устройств через роутер
    - alias: start_selected_router_permit_join_z2m
      id: start_selected_router_permit_join_z2m
      mode: restart
      triggers:
        - trigger: event
          event_type: call_service
          event_data:
            domain: input_select
            service: select_option
            service_data:
              entity_id: input_select.selected_router_for_permit_join_z2m
      conditions:
        - "{{ states.person | selectattr('attributes.user_id', 'eq', trigger.event.context.user_id) | list | count > 0 }}"
      actions:
        - action: mqtt.publish
          data:
            topic: "zigbee2mqtt/bridge/request/permit_join"
            payload: >
                {{ '{' ~ iif(trigger.event.data.service_data.option == 'Не выбрано', '"time":0', '"time":254, "device":"' ~ trigger.event.data.service_data.option) ~ '"}' }}

#Смена состояния выбора по состоянию в z2m
    - alias: set_option_for_selected_router_from_info_topic_z2m
      id: set_option_for_selected_router_from_info_topic_z2m
      mode: restart
      triggers:
        - trigger: state
          entity_id: switch.permit_join_switch_z2m
          id: 'switch_permit_join'
          to: 'off'
        - trigger: state
          entity_id: sensor.zigbee2mqtt_add_on_permit_join_current_device_z2m
          id: 'sensor_current_device'
      actions:
        - variables:
            permit_join_current_device: "{{ states('sensor.zigbee2mqtt_add_on_permit_join_current_device_z2m') if is_state('switch.permit_join_switch_z2m', 'on') and has_value('sensor.zigbee2mqtt_add_on_permit_join_current_device_z2m') else 'Не выбрано' }}"
        - parallel:
          - if:
              - condition: trigger
                id: switch_permit_join
              - "{{ not is_state('input_select.select_option', 'Не выбрано') }}"
            then:
              - action: input_select.select_option
                target:
                  entity_id: input_select.selected_router_for_permit_join_z2m
                data:
                  option: 'Не выбрано'
          - if:
              - condition: trigger
                id: sensor_current_device
              - "{{ not is_state('input_select.selected_router_for_permit_join_z2m', permit_join_current_device) }}"
            then:
              - action: input_select.select_option
                target:
                  entity_id: input_select.selected_router_for_permit_join_z2m
                data:
                  option: '{{ permit_join_current_device }}'

#Запуск таймера добавления устройств z2m
    - alias: start_timer_permit_join_timeout_z2m
      id: start_timer_permit_join_timeout_z2m
      initial_state: true
      mode: restart
      triggers:
        - trigger: state
          entity_id: sensor.zigbee2mqtt_add_on_permit_join_end_z2m
        - trigger: homeassistant
          event: start
        - trigger: event
          event_type: automation_reloaded
      actions:
        - variables:
            time_remaining: "{{ ((states('sensor.zigbee2mqtt_add_on_permit_join_end_z2m') | int(0)) / 1000 - (as_timestamp(utcnow(), 0) | int(0))) | int(0) }}"
        - if:
            - "{{ time_remaining > 0 }}"
          then:
            - action: timer.start
              target:
                entity_id: timer.permit_join_timeout_z2m
              data:
                duration: "{{ time_remaining }}"
          else:
            - action: timer.cancel
              target:
                entity_id: timer.permit_join_timeout_z2m
