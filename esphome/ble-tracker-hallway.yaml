substitutions:
  devicename: ble-tracker-hallway
  nodename: ble-tracker-hallway

external_components:
  - source: github://TheStaticTurtle/esphome_syslog
    components: [syslog]

esphome:
  name: $nodename
  comment: Monitoring HA state and BLE hallway

esp32:
  board: wemos_d1_mini32

wifi:
  fast_connect: true
  output_power: 20.5dB
  networks:

  #Основная точка
  - ssid: Kotletochka
    password: !secret wifi_password
    bssid: "50:ff:20:9e:1d:1e"
    priority: 1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${nodename}"
    password: !secret wifi_password

captive_portal:

# Enable logging
logger:
  #level: NONE
  #baud_rate: 0

syslog:
  ip_address: "kotletochka-ds.local"

# Enable Home Assistant API
api:
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: !secret ota_password

time:
  - platform: sntp
    id: sntp_time
    servers: 
      - 192.168.217.1
      - ntp2.vniiftri.ru
      - pool.ntp.org
    timezone: Europe/Moscow

esp32_ble_tracker:
 scan_parameters:
    active: false

ble_client:
  - mac_address: !secret bt_display_hallway_mac
    id: ble_display_hw

display:
  - platform: pvvx_mithermometer
    ble_client_id: ble_display_hw
    update_interval: 15min
    validity_period: 65535s
    time_id: sntp_time
    id: pvvx_display_hw
    lambda: |-
      double temp = id(temp_for_display_hw).state;
      double humidity = id(humidity_for_display_hw).state;
      if (temp <= -10) {
        it.print_bignum(fabs(temp));
        it.print_unit(pvvx_mithermometer::UNIT_MINUS);
      } else {
        it.print_bignum(temp);
        it.print_unit(pvvx_mithermometer::UNIT_DEG_C);
      }
      it.print_smallnum(humidity);
      it.print_percent();
      if (temp < 15 || temp > 26) {
        it.print_sad();
        if (temp < -5 || temp > 29) {
          it.print_bracket(true);
        }
      } else {
        it.print_happy();
      }

sensor:
  - platform: pvvx_mithermometer
    mac_address: !secret bt_display_hallway_mac
    battery_level:
      name: "ESP Xiaomi Hallway Battery Level"
    battery_voltage:
      name: "ESP Xiaomi Hallway Battery Voltage"
    signal_strength:
      name: "ESP Xiaomi Hallway Signal"

  - platform: homeassistant
    name: "Outdoor temperature"
    internal: true
    device_class: temperature
    entity_id: sensor.0x00158d000542ceaf_temperature
    id: temp_for_display_hw
    filters:
      - round: 1
    on_value:
      then:
        - component.update: pvvx_display_hw

  - platform: homeassistant
    name: "Outdoor humidity"
    internal: true
    device_class: humidity
    entity_id: sensor.0x00158d000542ceaf_humidity
    id: humidity_for_display_hw
    filters:
      - round: 0
    on_value:
      then:
        - component.update: pvvx_display_hw
  - platform: uptime
    name: "${devicename}_Uptime_Sensor"
    id: uptime_sec
    update_interval: 15s

  - platform: wifi_signal
    name: "${devicename}_WiFi_RSSI"
    update_interval: 60s

switch:
  - platform: gpio
    id: onboard_led
    name: "${devicename}_On_Board_Led"
    pin:
      number: GPIO2
      mode: OUTPUT
    restore_mode: ALWAYS_OFF

text_sensor:
  - platform: wifi_info
    ssid:
      name: "${devicename}_Connected_SSID"
    bssid:
      name: "${devicename}_Connected_BSSID" 

binary_sensor:
  - platform: status
    name: "${devicename}_Status"
    id: status_connection
    internal: true
    on_state:
          then:
            - if:
                condition:
                  - binary_sensor.is_on: "status_connection"
                then:
                  - switch.turn_on: "onboard_led"
                  
            - if:
                condition:
                  - binary_sensor.is_off: "status_connection"
                then:
                  - switch.turn_off: "onboard_led"

button:
  - platform: restart
    name: ${devicename}_Restart
    id: button_restart

  - platform: safe_mode
    name: ${devicename}_Safe_Mode
    id: button_restart_safe_mode
