
- alias: DB purge everyday
  id: DB purge everyday
  initial_state: true
  trigger:
    - platform: time
      at: '01:00:00'
  action:
    - service: recorder.purge
      data:
          keep_days: 30
          repack: true

#Перезапуск интеграции speedtest.net по недоступности сенсоров
- alias: speedtest_integration_restart
  id: speedtest_integration_restart
  trigger:
    - platform: time_pattern
      minutes: "/45"
  condition:
    - condition: state
      entity_id: binary_sensor.local_network_availability
      state: 'on'
    - condition: template
      value_template: >
            {% set ignore = ['unknown', 'unavailable', 'none'] %}
            {{ states('sensor.speedtest_ping') in ignore and
               states('sensor.speedtest_download') in ignore and
               states('sensor.speedtest_upload') in ignore
            }}
  action:
    - service: homeassistant.reload_config_entry
      data:
        entry_id: 8a7c8a568a453f39d2a77dda05119c4b
    # - service: rest_command.reload_integration_speedtest
    #   data: {}

- alias: speedtest_integration_restart_on_event
  id: speedtest_integration_restart_on_event
  mode: single
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: 'sensor.speedtest_ping'
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: 'sensor.speedtest_download'
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: 'sensor.speedtest_upload'
  condition:
    - condition: state
      entity_id: input_boolean.instances_stoping
      state: 'off'
    - condition: state
      entity_id: binary_sensor.local_network_availability
      state: 'on'
    - condition: template
      value_template: >-
        {{ trigger.event.data.new_state.state != trigger.event.data.old_state.state 
            and trigger.event.data.new_state.state in ['unknown', 'unavailable', 'none']
        }}
  action:
    - choose:
        - conditions: 
            - condition: state
              entity_id: input_boolean.instances_stoping
              state: 'off'
          sequence:
            - delay:
                seconds: 30
            - service: homeassistant.reload_config_entry
              data:
                entry_id: 9d3e3e3a42a160105b1bbc8754d3f78b

#Перезагрузка автоматизаций
- alias: system_automation_reload
  id: system_automation_reload
  initial_state: true
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: automation
        service: reload
    - platform: event
      event_type: automation_reloaded
  condition:
    - condition: template
      value_template: >-
        {{ trigger.event.event_type == 'call_service' and
           states.automation | selectattr('state', 'eq', 'on') | selectattr('entity_id', 'ne', this.entity_id) | map(attribute = 'entity_id') | list | count > 0
           or
           trigger.event.event_type == 'automation_reloaded' and
           expand('group.dynamic_group_automation_for_reload') | count > 0
        }}
  action:
    - choose:
        - conditions: "{{ trigger.event.event_type == 'call_service' }}"
          sequence:  
            - service: group.set
              data:
                name: dynamic group automation for reload
                object_id: dynamic_group_automation_for_reload
                icon: mdi:script-text
                entities: >-
                  {{ states.automation | selectattr('state', 'eq', 'on') | selectattr('entity_id', 'ne', this.entity_id) | map(attribute = 'entity_id') | list | join(', ') }}
            - service: group.set
              data:
                name: dynamic group all automation before reload
                object_id: dynamic_group_all_automation_before_reload
                icon: mdi:script-text
                entities: >-
                  {{ states.automation | selectattr('state', 'ne', 'unavailable') | selectattr('entity_id', 'ne', this.entity_id) | map(attribute = 'entity_id') | list | join(', ') }}
    - service: >- 
        {% if trigger.event.event_type == 'call_service' -%}
            automation.turn_off
        {% else -%}
            automation.turn_on
        {% endif -%}
      data:
        entity_id: >-
          {{ expand('group.dynamic_group_automation_for_reload') | selectattr('state', 'ne', 'unavailable') | map(attribute = 'entity_id')  | join(', ') }}
    - choose:
        - conditions: > 
                {{ 
                  trigger.event.event_type == 'automation_reloaded' and 
                  expand('group.dynamic_group_all_automation_before_reload') | selectattr('state', 'ne', 'unavailable') | map(attribute = 'entity_id') | reject('in', expand('group.dynamic_group_automation_for_reload') | map(attribute = 'entity_id') | list) | list | count > 0 
                }}
          sequence:  
            - service: automation.turn_off 
              data:
                entity_id: >-
                  {{ expand('group.dynamic_group_all_automation_before_reload') | selectattr('state', 'ne', 'unavailable') | map(attribute = 'entity_id') | reject('in', expand('group.dynamic_group_automation_for_reload') | map(attribute = 'entity_id') | list) | list | join(', ') }}

#Удаление устройств, без удаления интеграции
- alias: device_entity_deletion_python_script
  id: device_entity_deletion_python_script
  initial_state: true
  mode: parallel
  max: 200
  trigger:
    - platform: event
      event_type: device_registry_updated
  action:
    - service: python_script.exec
      data:
        device_id: "{{ trigger.event.data.device_id }}"
        source: |
          registry = hass.data['device_registry']
          device = registry.async_get(data['device_id'])
          if device and device.name_by_user == 'delete_this':
              registry.async_remove_device(data['device_id'])

#Установка флага перезапуска НА
- alias: system_event_instances_starting_stoping_set
  id: system_event_instances_starting_stoping_set
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
      id: 'homeassistant_start'
    # - platform: event
    #   event_type: homeassistant_started
    #   id: 'homeassistant_start'
    - platform: event
      event_type: homeassistant_stop
  action:
    - service: >
        {% if trigger.id == 'homeassistant_start' -%}
            input_boolean.turn_off
        {% else -%}
            input_boolean.turn_on
        {% endif %}
      data:
        entity_id: input_boolean.instances_stoping
    - service: >
        {% if trigger.id == 'homeassistant_start' -%}
            automation.turn_on
        {% else -%}
            automation.turn_off
        {% endif %}
      data:
        entity_id: automation.notifications_objects_in_unavailable_status

#Счетчик числа событий link down для лога Keenetic
- alias: counter increment link down keenetic
  id: counter increment link down keenetic
  initial_state: true
  mode: single
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: sensor.check_keenetic_link_down
  condition:
    - condition: template
      value_template: >
        {% set ignore = ['unknown', 'unavailable', 'none', None, null, '', 'null'] %}
        {{ 
           trigger.to_state.state not in ignore and trigger.from_state.state != '' and
           trigger.to_state.state != trigger.from_state.state
        }}
  action:
    - service: counter.increment
      entity_id: counter.counter_keenetic_link_down

#Счетчики числа событий warning и error в syslog HA
- alias: system log home assistant warning and error counter
  id: system log home assistant warning and error counter
  initial_state: true
  mode: queued
  max: 100
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        level: ERROR
    - platform: event
      event_type: system_log_event
      event_data:
        level: WARNING
  condition:
    - condition: template
      value_template: "{{ not (this.name | string) in (trigger.event.data.message | string) }}"
  action:
    - service: counter.increment
      data:
        entity_id: >- 
            {{ 'counter.system_log_' + trigger.event.data.level | lower + '_counter' }}

- alias: system log clear warning and error reset counter
  id: system log clear warning and error reset counter
  initial_state: true
  mode: queued
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: system_log
        service: clear
  action:
    - service: counter.reset
      data:
        entity_id:
          - counter.system_log_error_counter
          - counter.system_log_warning_counter

#Перезапуск модема, по переходу в статус unavailable
- alias: restart e3372h 320 modem unavailable
  id: restart e3372h 320 modem unavailable
  initial_state: true
  mode: single
  max_exceeded: silent
  trigger:
    - platform: state
      entity_id: sensor.huawei_e3372h_320_sinr
      to: 'unavailable'
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: sensor.huawei_e3372h_320_sinr
      state: 'unavailable'
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.huawei_e3372h_320_sinr
          from: 'unavailable'
      timeout: "00:05:00"
    - choose:
        - conditions: "{{ wait.trigger == None and is_state('binary_sensor.local_network_availability', 'on') }}"
          sequence:
              - service: huawei_lte.reboot
                data:
                  url: 'http://192.168.8.1/'

#Обновление Telegram bot API token в input text
- alias: update input text telegram bot api token
  id: update input text telegram bot api token
  initial_state: true
  mode: queued
  max_exceeded: silent
  trigger:
    - platform: event
      event_type: "event_telegram_reloaded"
  action:
    - service: input_text.set_value
      data:
        entity_id: input_text.var_telegram_bot_api_token
        value: !secret telegram_api

#Перезапуск интеграции проверки длительности сертификата для asuscomm по недоступности сенсоров
- alias: cert_expiry_timestamp_asuscomm_unavailable
  id: cert_expiry_timestamp_asuscomm_unavailable
  trigger:
    - platform: state
      entity_id: sensor.cert_expiry_timestamp_asuscomm
      to: 'unavailable'
    - platform: homeassistant
      event: start
  condition:
    - condition: state
      entity_id: sensor.cert_expiry_timestamp_asuscomm
      state: 'unavailable'
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.cert_expiry_timestamp_asuscomm
          from: 'unavailable'
      timeout: "00:01:00"
    - choose:
        - conditions: "{{ wait.trigger == None and is_state('binary_sensor.local_network_availability', 'on') }}"
          sequence:
            - service: homeassistant.reload_config_entry
              data:
                entry_id: 859d99dc60fc9116bb39f260696b465a
