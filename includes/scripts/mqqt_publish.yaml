#Самотестирование датчиков дыма
    # selftest_smoke_detector:
    #     alias: Самотестирование датчиков дыма
    #     icon: mdi:test-tube
    #     mode: queued
    #     fields:
    #       namesmokedetector:
    #         description: 'FRIENDLY_NAME из z2m датчика дыма'
    #         example: 'Smoke detector kitchen'
    #     sequence:
    #         - action: mqtt.publish
    #           data:
    #             topic: "zigbee2mqtt/ {{- namesmokedetector -}} /set"
    #             payload: "{\"selftest\":\"\"}"

#Чувствительность датчиков дыма
    # sensitivity_smoke_detector:
    #     alias: Чувствительность датчиков дыма
    #     icon: mdi:test-tube
    #     mode: queued
    #     fields:
    #       namesmokedetector:
    #         description: 'FRIENDLY_NAME из z2m датчика дыма'
    #         example: 'Smoke detector kitchen'
    #       sensitivity:
    #         description: 'Чувствительность датчика дыма'
    #         example: 'low, medium, high'
    #     sequence:
    #         - action: mqtt.publish
    #           data:
    #             topic: "zigbee2mqtt/ {{- namesmokedetector -}} /set"
    #             payload: "{\"sensitivity\":\"{{- sensitivity -}}\"}"

#Выявление устройств с низким сигналом
    zigbee2mqtt_linkuality_check:
        alias: Ур. сигнала устройств
        icon: mdi:access-point-check
        sequence:
          - action: script.turn_on
            target:
              entity_id: >
                {%- set list_sensors = expand('group.dynamic_group_sensor_linkquality') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') -%}
                {%- set datanames = namespace(low_linkquality=[]) -%}
                {%- for state in list_sensors -%}
                {%- if (state.entity_id.endswith('_linkquality') and (state.state | int(15)) < 15) or 
                    (state.entity_id.endswith('_zigbee') and (state_attr(state.entity_id ,'linkquality') | int(15)) < 15)-%}
                {%- set datanames.low_linkquality = datanames.low_linkquality + [state] -%}
                {%- endif -%}
                {%- endfor -%}
                {%- set num_low_link = datanames.low_linkquality | length -%}

                {% if num_low_link > 0 %}
                  script.zigbee2mqtt_link_level_low
                {% else %}
                  script.zigbee2mqtt_link_level_ok
                {% endif %}
    
    zigbee2mqtt_link_level_low:
        alias: zigbee2mqtt низкий уровень сигнала
        sequence:
        - action: telegram_bot.send_message
          data:
            config_entry_id: '{{ config_entry_id("notify.telegram_enzokot_to_bot") }}'
            title: >- 
                     ⚠️ *Контроль устройств Zigbee*
            disable_notification: true
            target: !secret telegram_enzokot_chat_id
            message: >
                {%- set list_sensors = expand('group.dynamic_group_sensor_linkquality') | selectattr('state', 'ne', None) | selectattr('state', 'ne', 'None') -%}
                {%- set datanames = namespace(device_name=[]) -%}
                {%- for state in list_sensors -%}
                {%- if (state.entity_id.endswith('_linkquality') and (state.state | int(15)) < 15) or 
                    (state.entity_id.endswith('_zigbee') and (state_attr(state.entity_id ,'linkquality') | int(15)) < 15)-%}
                {% if device_attr(state.entity_id, 'name_by_user') != none %}
                  {%- set datanames.device_name = datanames.device_name + [device_attr(state.entity_id, 'name_by_user')] -%}
                {% else %}
                  {%- set datanames.device_name = datanames.device_name + [device_attr(state.entity_id, 'name')] -%}
                {% endif %}
                {%- endif -%}
                {%- endfor -%}
                {%- set namesfriendly = datanames.device_name | list -%}
                {%- set num_low_link = namesfriendly | length -%}

                Низкий сигнал ({{ num_low_link }}шт): {% if num_low_link > 0 %}{{namesfriendly | join(', ') }}{% endif %}
    
    zigbee2mqtt_link_level_ok:
        alias: zigbee2mqtt нормальный уровень сигнала
        sequence:
        - action: telegram_bot.send_message
          data:
            config_entry_id: '{{ config_entry_id("notify.telegram_enzokot_to_bot") }}'
            title: >-
                     {{ '\U00002705' }} *Контроль устройств Zigbee*
            disable_notification: true
            target: !secret telegram_enzokot_chat_id
            message: "Устройств с низким уровнем сигнала не обнаружено"

#Автоматическая подстройка локальной температуры термоголовки
    auto_local_temperature_calibration_thermostats:
        alias: Автоматическая подстройка локальной температуры термоголовки
        icon: mdi:hydraulic-oil-temperature
        mode: parallel
        fields:
          namevalve:
            description: 'FRIENDLY_NAME из z2m термоголовки'
            example: 'Bedroom valve with thermostat'
          objectvalve:
            description: 'Имя объекта домена climate'
            example: 'climate.0x60a423fffea7e6f0'
          objectvalvewindow:
            description: 'Имя объекта сеносра открытого окна'
            example: 'switch.0x60a423fffea7e6f0_window_detection'
          objectsensortemperature:
            description: 'Имя объекта внешнего датчика температуры'
            example: 'sensor.esp_xiaomi_bed_room_temperature'
        sequence:
        - variables:
              calibration_local: >
                                 {{ 128 + ((states(objectsensortemperature) | float(0.0) 
                                    - states(objectvalve | replace('climate.', 'sensor.') + '_local_temperature') | float(0.0)) / 0.5) | round(0, 'common', 0) * 0.5 
                                    + states(objectvalve | replace('climate.', 'sensor.') + '_local_temperature_calibration') | float(0.0)
                                 }}
              calibration_local_condition: >
                                 {{ 128 + ((states(objectsensortemperature) | float(0.0) 
                                    - states(objectvalve | replace('climate.', 'sensor.') + '_local_temperature') | float(0.0)) / 0.5) | round(0, 'common', 0) * 0.5 
                                 }}
        - condition: template
          value_template: >-
             {{ calibration_local_condition != 0
                and is_state(objectvalvewindow, 'off') 
                and states(objectsensortemperature) not in ['unavailable', 'unknown', ''] 
                and state_attr(objectvalve, 'local_temperature') not in ['unavailable', 'unknown', ''] 
             }}
        - action: mqtt.publish
          data:
            topic: "zigbee2mqtt/{{- namevalve -}}/set/local_temperature_calibration"
            payload: '{{ calibration_local }}'
